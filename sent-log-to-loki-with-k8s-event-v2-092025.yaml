apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: loki
    meta.helm.sh/release-namespace: loki-stack
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: promtail
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: promtail-6.13.1
  name: loki-promtail
rules:
- apiGroups:
  - ""
  resources:
  - events  
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: loki
    meta.helm.sh/release-namespace: loki-stack
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: promtail
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: promtail-6.13.1
  name: loki-promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: loki-promtail
subjects:
- kind: ServiceAccount
  name: loki-promtail
  namespace: loki-promtail
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: loki
    meta.helm.sh/release-namespace: loki-stack
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: promtail
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: promtail-6.13.1
  name: loki-promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: loki-promtail
subjects:
- kind: ServiceAccount
  name: loki-promtail
  namespace: loki-promtail
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: loki
    meta.helm.sh/release-namespace: loki-stack
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: promtail
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: promtail-6.13.1
  name: loki-promtail
  namespace: loki-promtail
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-promtail
  namespace: loki-promtail
data:
  promtail.yaml: |
    server:
      log_level: info
      log_format: logfmt
      http_listen_port: 3101


    clients:
      - url: https://observe2-loki-gateway.observe.olsdemo.com/loki/api/v1/push  
        tenant_id: milkyk8s
        basic_auth:
          username: "lokiadmin"
          password: "loki@olsCl0udNaKub"


    positions:
      filename: /run/promtail/positions.yaml


    scrape_configs:
      - job_name: kubernetes-events
        static_configs:
          - targets:
              - localhost
            labels:
              job: kubernetes-events
              __path__: /var/log/k8s-events/*.log

      #See also https://github.com/grafana/loki/blob/master/production/ksonnet/promtail/scrape_config.libsonnet for reference
      - job_name: kubernetes-pods
        pipeline_stages:
          - cri: {}
          - match:
              selector: '{app="eventrouter"}'
              stages:
              - json:
                  expressions:
                    namespace: event.metadata.namespace
              - labels:
                  namespace: ""  
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - __meta_kubernetes_pod_label_app
              - __tmp_controller_name
              - __meta_kubernetes_pod_name
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_instance
              - __meta_kubernetes_pod_label_instance
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: instance
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              - __meta_kubernetes_pod_label_component
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: node_name
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels:
            - namespace
            - app
            target_label: job
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_container_name
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
            target_label: __path__
          - action: replace
            regex: true/(.*)
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
            - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
            - __meta_kubernetes_pod_container_name
            target_label: __path__

        #- job_name: kubernetes-pods
        #pipeline_stages:
        #  - cri: {}
        #kubernetes_sd_configs:
        #  - role: event
        #- match:
        #  selector: '{name="eventrouter"}'
        #  stages:
        #  - json:
        #      expressions:
        #        namespace: event.metadata.namespace
        #  - labels:
        #    namespace: ""    

    limits_config:


    tracing:
      enabled: false
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    deprecated.daemonset.template.generation: "1"
    meta.helm.sh/release-name: loki
    meta.helm.sh/release-namespace: loki-stack
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: promtail
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: promtail-6.13.1
  name: loki-promtail
  namespace: loki-promtail
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: promtail
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/instance: loki
        app.kubernetes.io/name: promtail
    spec:
      containers:
      - args:
        - -config.file=/etc/promtail/promtail.yaml
        - -config.expand-env=true
        env:
        - name: TZ
          value: "Asia/Bangkok"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: docker.io/grafana/promtail:2.8.3
        imagePullPolicy: IfNotPresent
        name: promtail
        ports:
        - containerPort: 3101
          name: http-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/promtail
          name: config
        - mountPath: /run/promtail
          name: run
        - mountPath: /var/lib/docker/containers
          name: containers
          readOnly: true
        - mountPath: /var/log/pods
          name: pods
          readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      serviceAccount: loki-promtail
      serviceAccountName: loki-promtail
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      volumes:
      - name: config
        configMap:
          defaultMode: 420
          name: loki-promtail
      - hostPath:
          path: /run/promtail
          type: ""
        name: run
      - hostPath:
          path: /var/lib/docker/containers
          type: ""
        name: containers
      - hostPath:
          path: /var/log/pods
          type: ""
        name: pods
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: kubernetes-events-logger
#  namespace: loki-promtail
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: kubernetes-events-logger
#  template:
#    metadata:
#      labels:
#        app: kubernetes-events-logger
#    spec:
#      serviceAccountName: loki-promtail
#      securityContext:
#        runAsUser: 0
#        runAsGroup: 0
#        fsGroup: 0        
#      containers:
#        - name: events-logger
#          image: registry.container-platform.inet.co.th/public/bitnami-kubectl:1.33.4  # หรือ image ที่มี kubectl + jq
#          command:
#            - /bin/sh
#            - -c
#            - |
#              while true; do
#                kubectl get events --all-namespaces -o json | jq -c '.items[]' >> /var/log/k8s-events/events.log
#                sleep 60
#              done            
#          volumeMounts:
#            - name: log-volume
#              mountPath: /var/log/k8s-events
#      volumes:
#        - name: log-volume
#          #emptyDir: {}
#          hostPath:
#            path: /var/log/k8s-events
#            type: DirectoryOrCreate

#---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kubernetes-events-logger
  #namespace: monitoring
  namespace: loki-promtail
spec:
  schedule: "*/5 * * * *"  # รันทุก ๆ 5 นาที
  successfulJobsHistoryLimit: 3 # Retain only 3 successful Jobs
  failedJobsHistoryLimit: 1 # Retain only 1 failed Job    
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 300
      template:
        spec:
          serviceAccount: loki-promtail
          serviceAccountName: loki-promtail
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            fsGroup: 0             
          containers:
            - name: kubernetes-events-logger
              #image: bitnami/kubectl:latest
              image: registry.container-platform.inet.co.th/public/bitnami-kubectl:1.33.4
              command:
                - /bin/sh
                - -c
                - |
                  kubectl get events --all-namespaces -o json | jq -c '.items[]' | while read event; do
                    echo $event
                  done
#              # ส่งออก logs ไปที่ไฟล์ให้ Promtail อ่านได้
#                - /bin/sh
#                - -c
#                - |
#                  while true; do
#                  kubectl get events --all-namespaces -o json | jq -c '.items[]' >> /var/log/k8s-events/events.log
#                  sleep 60
#                  done
              volumeMounts:
                - name: log-volume
                  mountPath: /var/log/k8s-events
          restartPolicy: OnFailure
          volumes:
            - name: log-volume
              #emptyDir: {}
              hostPath:
                path: /var/log/k8s-events
                type: DirectoryOrCreate
